{
  "X3D": {
    "@xmlns:xsd": "http://www.w3.org/2001/XMLSchema-instance",
    "@profile": "Immersive",
    "@version": "3.3",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.3.xsd",
    "head": {
      "component": [
        {
          "@name": "Shaders",
          "@level": 1
        },
        {
          "@name": "CubeMapTexturing",
          "@level": 1
        }
      ],
      "meta": [
        {
          "@name": "title",
          "@content": "flowerproto.x3d"
        },
        {
          "@name": "creator",
          "@content": "John Carlson"
        },
        {
          "@name": "description",
          "@content": "A flower proto with configurable shaders"
        },
        {
          "@name": "generator",
          "@content": "X3D-Edit, https://savage.nps.edu/X3D-Edit"
        },
        {
          "@name": "identifier",
          "@content": "https://coderextreme.net/X3DJSONLD/flowerproto.x3d"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "ProtoDeclare": {
            "@name": "FlowerProto",
            "-children": [
              {
                "ProtoInterface": {
                  "field": [
                    {
                      "@name": "vertex",
                      "@accessType": "inputOutput",
                      "@type": "MFString",
                      "@value": "\\\"../shaders/gl_flowers_chromatic.vs\\\""
                    },
                    {
                      "@name": "fragment",
                      "@accessType": "inputOutput",
                      "@type": "MFString",
                      "@value": "\\\"../shaders/pc_flowers.fs\\\""
                    }
                  ]
                }
              },
              {
                "ProtoBody": {
                  "-children": [
                    {
                      "Transform": {
                        "@DEF": "transform",
                        "-children": [
                          {
                            "Shape": {
                              "-appearance": [
                                {
                                  "Appearance": {
                                    "@containerField": "appearance",
                                    "-material": [
                                      {
                                        "Material": {
                                          "@containerField": "material",
                                          "@diffuseColor": [
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      }
                                    ],
                                    "-texture": [
                                      {
                                        "ComposedCubeMapTexture": {
                                          "@containerField": "texture",
                                          "@DEF": "texture",
                                          "-back": [
                                            {
                                              "ImageTexture": {
                                                "@containerField": "back",
                                                "@url": [
                                                  "../resources/images/all_probes/stpeters_cross/stpeters_back.png",
                                                  "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png"
                                                ]
                                              }
                                            }
                                          ],
                                          "-bottom": [
                                            {
                                              "ImageTexture": {
                                                "@containerField": "bottom",
                                                "@url": [
                                                  "../resources/images/all_probes/stpeters_cross/stpeters_bottom.png",
                                                  "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png"
                                                ]
                                              }
                                            }
                                          ],
                                          "-front": [
                                            {
                                              "ImageTexture": {
                                                "@containerField": "front",
                                                "@url": [
                                                  "../resources/images/all_probes/stpeters_cross/stpeters_front.png",
                                                  "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png"
                                                ]
                                              }
                                            }
                                          ],
                                          "-left": [
                                            {
                                              "ImageTexture": {
                                                "@containerField": "left",
                                                "@url": [
                                                  "../resources/images/all_probes/stpeters_cross/stpeters_left.png",
                                                  "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png"
                                                ]
                                              }
                                            }
                                          ],
                                          "-right": [
                                            {
                                              "ImageTexture": {
                                                "@containerField": "right",
                                                "@url": [
                                                  "../resources/images/all_probes/stpeters_cross/stpeters_right.png",
                                                  "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png"
                                                ]
                                              }
                                            }
                                          ],
                                          "-top": [
                                            {
                                              "ImageTexture": {
                                                "@containerField": "top",
                                                "@url": [
                                                  "../resources/images/all_probes/stpeters_cross/stpeters_top.png",
                                                  "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png"
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "-children": [
                                      {
                                        "ComposedShader": {
                                          "@DEF": "shader",
                                          "@language": "GLSL",
                                          "field": [
                                            {
                                              "@name": "cube",
                                              "@type": "SFInt32",
                                              "@accessType": "inputOutput",
                                              "@value": "0"
                                            },
                                            {
                                              "@name": "chromaticDispertion",
                                              "@type": "SFVec3f",
                                              "@accessType": "inputOutput",
                                              "@value": "0.98 1 1.033"
                                            },
                                            {
                                              "@name": "bias",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "10"
                                            },
                                            {
                                              "@name": "scale",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "10"
                                            },
                                            {
                                              "@name": "power",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "2"
                                            },
                                            {
                                              "@name": "a",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "3"
                                            },
                                            {
                                              "@name": "b",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "1"
                                            },
                                            {
                                              "@name": "c",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "3"
                                            },
                                            {
                                              "@name": "d",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "3"
                                            },
                                            {
                                              "@name": "tdelta",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "0.5"
                                            },
                                            {
                                              "@name": "pdelta",
                                              "@type": "SFFloat",
                                              "@accessType": "inputOutput",
                                              "@value": "0.5"
                                            }
                                          ],
                                          "#comment": "<field name='cube' type='SFNode' accessType=\\\"inputOutput\\\"> <ComposedCubeMapTexture USE=\\\"texture\\\"/> </field>",
                                          "-children": [
                                            {
                                              "ShaderPart": {
                                                "@type": "VERTEX",
                                                "-children": [
                                                  {
                                                    "IS": {
                                                      "connect": [
                                                        {
                                                          "@nodeField": "url",
                                                          "@protoField": "vertex"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "ShaderPart": {
                                                "@type": "FRAGMENT",
                                                "-children": [
                                                  {
                                                    "IS": {
                                                      "connect": [
                                                        {
                                                          "@nodeField": "url",
                                                          "@protoField": "fragment"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "-geometry": [
                                {
                                  "Sphere": {
                                    "@containerField": "geometry"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "Script": {
                              "@DEF": "Bounce",
                              "field": [
                                {
                                  "@name": "translation",
                                  "@accessType": "inputOutput",
                                  "@type": "SFVec3f",
                                  "@value": "0 0 0"
                                },
                                {
                                  "@name": "velocity",
                                  "@accessType": "inputOutput",
                                  "@type": "SFVec3f",
                                  "@value": "0 0 0"
                                },
                                {
                                  "@name": "set_fraction",
                                  "@accessType": "inputOnly",
                                  "@type": "SFTime"
                                },
                                {
                                  "@name": "a",
                                  "@type": "SFFloat",
                                  "@accessType": "inputOutput",
                                  "@value": "0.5"
                                },
                                {
                                  "@name": "b",
                                  "@type": "SFFloat",
                                  "@accessType": "inputOutput",
                                  "@value": "0.5"
                                },
                                {
                                  "@name": "c",
                                  "@type": "SFFloat",
                                  "@accessType": "inputOutput",
                                  "@value": "3"
                                },
                                {
                                  "@name": "d",
                                  "@type": "SFFloat",
                                  "@accessType": "inputOutput",
                                  "@value": "3"
                                },
                                {
                                  "@name": "tdelta",
                                  "@type": "SFFloat",
                                  "@accessType": "inputOutput",
                                  "@value": "0.5"
                                },
                                {
                                  "@name": "pdelta",
                                  "@type": "SFFloat",
                                  "@accessType": "inputOutput",
                                  "@value": "0.5"
                                }
                              ],
                              "#sourceText": [
                                "ecmascript: function initialize() { translation = new SFVec3f(0, 0, 0); velocity = new SFVec3f( Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5); } function set_fraction() { translation = new SFVec3f( translation.x + velocity.x, translation.y + velocity.y, translation.z + velocity.z); for (var j = 0; j <= 2; j++) { if (Math.abs(translation.x) > 10) { initialize(); } else if (Math.abs(translation.y) > 10) { initialize(); } else if (Math.abs(translation.z) > 10) { initialize(); } else { velocity.x += Math.random() * 0.2 - 0.1; velocity.y += Math.random() * 0.2 - 0.1; velocity.z += Math.random() * 0.2 - 0.1; } } animate_flowers(); } function animate_flowers(fraction, eventTime) { choice = Math.floor(Math.random() * 4); switch (choice) { case 0: a += Math.random() * 0.2 - 0.1; break; case 1: b += Math.random() * 0.2 - 0.1; break; case 2: c += Math.random() * 2 - 1; break; case 3: d += Math.random() * 2 - 1; break; } tdelta += 0.5; pdelta += 0.5; if (a > 1) { a = 0.5; } if (b > 1) { b = 0.5; } if (c < 1) { c = 4; } if (d < 1) { d = 4; } if (c > 10) { c = 4; } if (d > 10) { d = 4; } }",
                                ""
                              ]
                            }
                          },
                          {
                            "TimeSensor": {
                              "@DEF": "TourTime",
                              "@cycleInterval": 0.15,
                              "@loop": true
                            }
                          }
                        ],
                        "ROUTE": [
                          {
                            "@fromNode": "TourTime",
                            "@fromField": "cycleTime",
                            "@toNode": "Bounce",
                            "@toField": "set_fraction"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "translation_changed",
                            "@toNode": "transform",
                            "@toField": "set_translation"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "a",
                            "@toNode": "shader",
                            "@toField": "a"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "b",
                            "@toNode": "shader",
                            "@toField": "b"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "c",
                            "@toNode": "shader",
                            "@toField": "c"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "d",
                            "@toNode": "shader",
                            "@toField": "d"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "tdelta",
                            "@toNode": "shader",
                            "@toField": "tdelta"
                          },
                          {
                            "@fromNode": "Bounce",
                            "@fromField": "pdelta",
                            "@toNode": "shader",
                            "@toField": "pdelta"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
}