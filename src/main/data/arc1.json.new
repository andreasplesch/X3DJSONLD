{
  "X3D": {
    "@xmlns:xsd": "http://www.w3.org/2001/XMLSchema-instance",
    "@profile": "Immersive",
    "@version": "3.3",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.3.xsd",
    "head": {
      "meta": [
        {
          "@name": "title",
          "@content": "arc.x3d"
        },
        {
          "@name": "creator",
          "@content": "John Carlson"
        },
        {
          "@name": "generator",
          "@content": "manual"
        },
        {
          "@name": "identifier",
          "@content": "https://coderextreme.net/X3DJSONLD/arc.x3d"
        },
        {
          "@name": "description",
          "@content": "an attempt to implement an arc in a graph"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "Viewpoint": {
            "@position": [
              0,
              0,
              5
            ],
            "@description": "a moving graph"
          }
        },
        {
          "Background": {
            "@skyColor": [
              0.4,
              0.4,
              0.4
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "cylinder1",
            "Shape": {
              "-appearance": {
                "Appearance": {
                  "-material": {
                    "Material": {
                      "@diffuseColor": [
                        0.2,
                        0.7,
                        0.7
                      ]
                    }
                  }
                }
              },
              "-geometry": {
                "Cylinder": {
                  "@radius": 0.1
                }
              }
            }
          }
        },
        {
          "ProtoDeclare": {
            "@name": "point",
            "ProtoInterface": {
              "field": [
                {
                  "@name": "translation",
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@value": "0 0 0"
                }
              ]
            },
            "ProtoBody": {
              "Transform": {
                "@DEF": "node",
                "-children": [
                  {
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "translation",
                          "@protoField": "translation"
                        }
                      ]
                    }
                  },
                  {
                    "Shape": {
                      "-geometry": {
                        "Sphere": {
                          "@radius": 0.1
                        }
                      },
                      "-appearance": {
                        "Appearance": {
                          "-material": {
                            "Material": {
                              "@diffuseColor": [
                                1,
                                0,
                                0
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "PositionInterpolator": {
                      "@DEF": "PI1",
                      "@key": [
                        0,
                        1
                      ],
                      "@keyValue": [
                        0,
                        0,
                        0,
                        0,
                        5,
                        0
                      ]
                    }
                  },
                  {
                    "Script": {
                      "@DEF": "MB1",
                      "-children": [
                        {
                          "#sourceText": [
                            "",
                            "",
                            "ecmascript:",
                            "\t\tfunction set_location(value) {",
                            "                    old = translation;",
                            "\t\t    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);",
                            "                    keyValue = new MFVec3f([old, translation]);",
                            "\t\t    // Browser.println(translation);",
                            "\t\t}",
                            ""
                          ]
                        }
                      ],
                      "field": [
                        {
                          "@name": "translation",
                          "@accessType": "inputOutput",
                          "@type": "SFVec3f",
                          "@value": "50 50 0"
                        },
                        {
                          "@name": "old",
                          "@accessType": "inputOutput",
                          "@type": "SFVec3f",
                          "@value": "0 0 0"
                        },
                        {
                          "@name": "set_location",
                          "@accessType": "inputOnly",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "keyValue",
                          "@accessType": "outputOnly",
                          "@type": "MFVec3f"
                        }
                      ]
                    }
                  },
                  {
                    "TimeSensor": {
                      "@DEF": "CL1",
                      "@cycleInterval": "3",
                      "@loop": true
                    }
                  }
                ],
                "ROUTE": [
                  {
                    "@fromNode": "CL1",
                    "@fromField": "cycleTime",
                    "@toNode": "MB1",
                    "@toField": "set_location"
                  },
                  {
                    "@fromNode": "CL1",
                    "@fromField": "fraction_changed",
                    "@toNode": "PI1",
                    "@toField": "set_fraction"
                  },
                  {
                    "@fromNode": "MB1",
                    "@fromField": "keyValue",
                    "@toNode": "PI1",
                    "@toField": "keyValue"
                  },
                  {
                    "@fromNode": "PI1",
                    "@fromField": "value_changed",
                    "@toNode": "node",
                    "@toField": "set_translation"
                  }
                ]
              }
            }
          }
        },
        {
          "#comment": "from doug sanden"
        },
        {
          "ProtoDeclare": {
            "@name": "x3dconnector",
            "ProtoInterface": {
              "field": [
                {
                  "@name": "startnode",
                  "@accessType": "initializeOnly",
                  "@type": "SFNode"
                },
                {
                  "@name": "endnode",
                  "@accessType": "initializeOnly",
                  "@type": "SFNode"
                },
                {
                  "@name": "connectornode",
                  "@accessType": "initializeOnly",
                  "@type": "SFNode"
                },
                {
                  "@name": "set_startpoint",
                  "@accessType": "inputOnly",
                  "@type": "SFVec3f"
                },
                {
                  "@name": "set_endpoint",
                  "@accessType": "inputOnly",
                  "@type": "SFVec3f"
                }
              ]
            },
            "ProtoBody": {
              "Script": {
                "@DEF": "S1",
                "field": [
                  {
                    "@name": "startnode",
                    "@accessType": "initializeOnly",
                    "@type": "SFNode"
                  },
                  {
                    "@name": "endnode",
                    "@accessType": "initializeOnly",
                    "@type": "SFNode"
                  },
                  {
                    "@name": "connectornode",
                    "@accessType": "initializeOnly",
                    "@type": "SFNode"
                  },
                  {
                    "@name": "set_startpoint",
                    "@accessType": "inputOnly",
                    "@type": "SFVec3f"
                  },
                  {
                    "@name": "set_endpoint",
                    "@accessType": "inputOnly",
                    "@type": "SFVec3f"
                  }
                ],
                "-children": [
                  {
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "startnode",
                          "@protoField": "startnode"
                        },
                        {
                          "@nodeField": "endnode",
                          "@protoField": "endnode"
                        },
                        {
                          "@nodeField": "connectornode",
                          "@protoField": "connectornode"
                        },
                        {
                          "@nodeField": "set_startpoint",
                          "@protoField": "set_startpoint"
                        },
                        {
                          "@nodeField": "set_endpoint",
                          "@protoField": "set_endpoint"
                        }
                      ]
                    }
                  },
                  {
                    "#sourceText": [
                      "",
                      "            ecmascript:",
                      "            ",
                      "        function recompute(startpoint,endpoint){",
                      "\t    if (typeof endpoint === 'undefined') {",
                      "\t\treturn;",
                      "\t    }",
                      "            var dif = endpoint.subtract(startpoint);",
                      "            var dist = dif.length()*0.5;",
                      "            var dif2 = dif.multiply(0.5);",
                      "            var norm = dif.normalize();",
                      "            var transl = startpoint.add(dif2);",
                      "\t    return {",
                      "\t\t    scale : new SFVec3f(1.0,dist,1.0),",
                      "\t\t    translation : transl,",
                      "\t\t    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)",
                      "\t    \t    // rotation : new x3dom.fields.Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)",
                      "\t    };",
                      "\t}",
                      "\tfunction recompute_and_route(startpoint, endpoint) {",
                      "\t      var trafo = recompute(startpoint, endpoint);",
                      "\t      connectornode.translation = trafo.translation;",
                      "\t      connectornode.rotation = trafo.rotation;",
                      "\t      connectornode.scale = trafo.scale;",
                      "\t}",
                      "        function initialize(){",
                      "            recompute_and_route(startnode.translation,endnode.translation);",
                      "        }",
                      "        function set_startpoint(val,t){",
                      "            recompute_and_route(val,endnode.translation);",
                      "        }",
                      "        function set_endpoint(val,t){",
                      "            recompute_and_route(startnode.translation,val);",
                      "        }",
                      ""
                    ]
                  }
                ]
              }
            }
          }
        },
        {
          "ProtoInstance": {
            "@name": "point",
            "@DEF": "start"
          }
        },
        {
          "ProtoInstance": {
            "@name": "point",
            "@DEF": "end"
          }
        },
        {
          "ProtoInstance": {
            "@name": "x3dconnector",
            "@DEF": "connector1",
            "fieldValue": [
              {
                "@name": "startnode",
                "ProtoInstance": {
                  "@name": "point",
                  "@USE": "start"
                }
              },
              {
                "@name": "endnode",
                "ProtoInstance": {
                  "@name": "point",
                  "@USE": "end"
                }
              },
              {
                "@name": "connectornode",
                "Transform": {
                  "@USE": "cylinder1"
                }
              }
            ]
          }
        }
      ],
      "ROUTE": [
        {
          "@fromNode": "start",
          "@fromField": "translation",
          "@toNode": "connector1",
          "@toField": "set_startpoint"
        },
        {
          "@fromNode": "end",
          "@fromField": "translation",
          "@toNode": "connector1",
          "@toField": "set_endpoint"
        }
      ]
    }
  }
}