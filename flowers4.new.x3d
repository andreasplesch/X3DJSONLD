<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
    <head>
        <meta name='title' content='flowers4.x3d'/>
        <meta name='creator' content='John Carlson'/>
        <meta name='generator' content='manual'/>
        <meta name='identifier' content='http://coderextreme.net/X3DJSONLD/flowers4.x3d'/>
        <meta name='description' content='an animated flower'/>
        <meta name='translated' content='15 May 2017'/>
        <meta name='generator' content='X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html'/>
        <meta name='reference' content='X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding'/>
        <meta name='translated' content='15 May 2017'/>
        <meta name='generator' content='X3DJSONLD: https://github.com/coderextreme/X3DJSONLD'/>
    </head>
    <Scene>
        <NavigationInfo avatarSize='0.25 1.6 0.75' transitionType='"LINEAR"' type='"EXAMINE" "ANY"'/>
        <Background backUrl='"cubemap/all_probes/stpeters_cross/stpeters_back.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_back.png"' bottomUrl='"cubemap/all_probes/stpeters_cross/stpeters_bottom.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_bottom.png"' frontUrl='"cubemap/all_probes/stpeters_cross/stpeters_front.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_front.png"' leftUrl='"cubemap/all_probes/stpeters_cross/stpeters_left.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_left.png"' rightUrl='"cubemap/all_probes/stpeters_cross/stpeters_right.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_right.png"' topUrl='"cubemap/all_probes/stpeters_cross/stpeters_top.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_top.png"'/>
        <Transform DEF='transform'>
            <Shape>
                <Appearance>
                    <Material diffuseColor='0.7 0.7 0.7' specularColor='0.5 0.5 0.5'/>
                    <ComposedShader DEF='shader' language='GLSL'>
                        <ShaderPart url='"x3dom.vs" "http://coderextreme.net/X3DJSONLD/x3dom.vs"'/>
                        <ShaderPart type='FRAGMENT' url='"pc_bubbles.fs" "http://coderextreme.net/X3DJSONLD/pc_bubbles.fs"'/>
                        <field name='cube' accessType='inputOutput' type='SFInt32' value='0'/>
                        <field name='chromaticDispertion' accessType='inputOutput' type='SFVec3f' value='0.98 1 1.033'/>
                        <field name='bias' accessType='inputOutput' type='SFFloat' value='0.5'/>
                        <field name='scale' accessType='inputOutput' type='SFFloat' value='0.5'/>
                        <field name='power' accessType='inputOutput' type='SFFloat' value='2.0'/>
                    </ComposedShader>
                    <ComposedCubeMapTexture>
                        <ImageTexture containerField='back' url='"cubemap/all_probes/stpeters_cross/stpeters_back.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_back.png"'/>
                        <ImageTexture containerField='bottom' url='"cubemap/all_probes/stpeters_cross/stpeters_bottom.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_bottom.png"'/>
                        <ImageTexture containerField='front' url='"cubemap/all_probes/stpeters_cross/stpeters_front.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_front.png"'/>
                        <ImageTexture containerField='left' url='"cubemap/all_probes/stpeters_cross/stpeters_left.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_left.png"'/>
                        <ImageTexture containerField='right' url='"cubemap/all_probes/stpeters_cross/stpeters_right.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_right.png"'/>
                        <ImageTexture containerField='top' url='"cubemap/all_probes/stpeters_cross/stpeters_top.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_top.png"'/>
                    </ComposedCubeMapTexture>
                </Appearance>
                <IndexedFaceSet DEF='Orbit'>
                    <Coordinate DEF='OrbitCoordinates'/>
                </IndexedFaceSet>
                <!-- <Sphere> -->
            </Shape>
        </Transform>
        <Script DEF='OrbitScript'>
            <field name='set_fraction' accessType='inputOnly' type='SFFloat'/>
            <field name='coordinates' accessType='inputOutput' type='MFVec3f'/>
            <field name='coordIndexes' accessType='outputOnly' type='MFInt32'/>
<![CDATA[
ecmascript:

var e = 5;
var f = 5;
var g = 5;
var h = 5;

function initialize() {
     resolution = 100;
     updateCoordinates(resolution);
     if (typeof coordIndexes == 'undefined' || coordIndexes == null) {
     	coordIndexes = new MFInt32();
     }
     ci = 0;
     for ( i = 0; i < resolution-1; i++) {
     	for ( j = 0; j < resolution-1; j++) {
	     coordIndexes[ci] = i*resolution+j;
	     coordIndexes[ci+1] = i*resolution+j+1;
	     coordIndexes[ci+2] = (i+1)*resolution+j+1;
	     coordIndexes[ci+3] = (i+1)*resolution+j;
	     coordIndexes[ci+4] = -1;
	     ci += 5;
	}
    }
}

function updateCoordinates(resolution) {
     theta = 0.0;
     phi = 0.0;
     delta = (2 * 3.141592653) / (resolution-1);
     if (typeof coordinates == 'undefined' || coordinates == null) {
     	coordinates = new MFVec3f();
     }
     for ( i = 0; i < resolution; i++) {
     	for ( j = 0; j < resolution; j++) {
		rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
		coordinates[i*resolution+j] = new SFVec3f();
		coordinates[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
		coordinates[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
		coordinates[i*resolution+j][2] = rho * Math.sin(phi);
		theta += delta;
	}
	phi += delta;
     }
}

function set_fraction(fraction, eventTime) {
	choice = Math.floor(Math.random() * 4);
	switch (choice) {
	case 0:
		e += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 1:
		f += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 2:
		g += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 3:
		h += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	}
	if (f < 1) {
		f = 10;
	}
	if (g < 1) {
		g = 4;
	}
	if (h < 1) {
		h = 4;
	}
	resolution = 100;
	updateCoordinates(resolution);
}

]]>
        </Script>
        <TimeSensor DEF='Clock' cycleInterval='16.0' loop='true'/>
        <ROUTE fromField='coordIndexes' fromNode='OrbitScript' toField='set_coordIndex' toNode='Orbit'/>
        <ROUTE fromField='coordinates' fromNode='OrbitScript' toField='set_point' toNode='OrbitCoordinates'/>
        <ROUTE fromField='fraction_changed' fromNode='Clock' toField='set_fraction' toNode='OrbitScript'/>
    </Scene>
</X3D>
