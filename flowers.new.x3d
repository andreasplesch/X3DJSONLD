<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
    <head>
        <meta name='title' content='flowers.x3d'/>
        <meta name='creator' content='John Carlson'/>
        <meta name='description' content='5 or more prismatic flowers'/>
        <meta name='generator' content='X3D-Edit, https://savage.nps.edu/X3D-Edit'/>
        <meta name='identifier' content='http://coderextreme.net/X3DJSONLD/flowers.x3d'/>
        <meta name='translated' content='15 May 2017'/>
        <meta name='generator' content='X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html'/>
        <meta name='reference' content='X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding'/>
        <meta name='translated' content='15 May 2017'/>
        <meta name='generator' content='X3DJSONLD: https://github.com/coderextreme/X3DJSONLD'/>
    </head>
    <Scene>
        <NavigationInfo avatarSize='0.25 1.6 0.75' transitionType='"LINEAR"' type='"EXAMINE" "ANY"'/>
        <Background backUrl='"cubemap/all_probes/stpeters_cross/stpeters_back.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_back.png"' bottomUrl='"cubemap/all_probes/stpeters_cross/stpeters_bottom.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_bottom.png"' frontUrl='"cubemap/all_probes/stpeters_cross/stpeters_front.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_front.png"' leftUrl='"cubemap/all_probes/stpeters_cross/stpeters_left.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_left.png"' rightUrl='"cubemap/all_probes/stpeters_cross/stpeters_right.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_right.png"' topUrl='"cubemap/all_probes/stpeters_cross/stpeters_top.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_top.png"'/>
        <ProtoDeclare name='flower'>
            <ProtoBody>
                <Transform DEF='transform'>
                    <Shape>
                        <Appearance>
                            <Material diffuseColor='0.7 0.7 0.7' specularColor='0.5 0.5 0.5'/>
                            <ComposedShader DEF='shader' language='GLSL'>
                                <ShaderPart url='"cobweb.vs" "http://coderextreme.net/X3DJSONLD/cobweb.vs"'/>
                                <ShaderPart type='FRAGMENT' url='"pc_bubbles.fs" "http://coderextreme.net/X3DJSONLD/pc_bubbles.fs"'/>
                                <field name='xxxcube' accessType='inputOutput' type='SFInt32' value='0'/>
                                <field name='cube' accessType='inputOutput' type='SFNode'>
                                    <ComposedCubeMapTexture USE='texture'/>
                                </field>
                                <field name='chromaticDispertion' accessType='inputOutput' type='SFVec3f' value='0.98 1 1.033'/>
                                <field name='bias' accessType='inputOutput' type='SFFloat' value='10.0'/>
                                <field name='scale' accessType='inputOutput' type='SFFloat' value='10.0'/>
                                <field name='power' accessType='inputOutput' type='SFFloat' value='2.0'/>
                            </ComposedShader>
                            <ComposedCubeMapTexture DEF='texture'>
                                <ImageTexture containerField='back' url='"cubemap/all_probes/stpeters_cross/stpeters_back.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_back.png"'/>
                                <ImageTexture containerField='bottom' url='"cubemap/all_probes/stpeters_cross/stpeters_bottom.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_bottom.png"'/>
                                <ImageTexture containerField='front' url='"cubemap/all_probes/stpeters_cross/stpeters_front.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_front.png"'/>
                                <ImageTexture containerField='left' url='"cubemap/all_probes/stpeters_cross/stpeters_left.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_left.png"'/>
                                <ImageTexture containerField='right' url='"cubemap/all_probes/stpeters_cross/stpeters_right.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_right.png"'/>
                                <ImageTexture containerField='top' url='"cubemap/all_probes/stpeters_cross/stpeters_top.png" "http://coderextreme.net/X3DJSONLD/cubemap/all_probes/stpeters_cross/stpeters_top.png"'/>
                            </ComposedCubeMapTexture>
                        </Appearance>
                        <IndexedFaceSet DEF='Orbit'>
                            <Coordinate DEF='OrbitCoordinates'/>
                        </IndexedFaceSet>
                    </Shape>
                </Transform>
                <Script DEF='Bounce'>
                    <field name='translation' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                    <field name='velocity' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                    <field name='set_fraction' accessType='inputOnly' type='SFTime'/>
                    <field name='coordinates' accessType='inputOutput' type='MFVec3f'/>
                    <field name='coordIndexes' accessType='inputOutput' type='MFInt32'/>
                    <field name='a' accessType='inputOutput' type='SFFloat' value='0.5'/>
                    <field name='b' accessType='inputOutput' type='SFFloat' value='0.5'/>
                    <field name='c' accessType='inputOutput' type='SFFloat' value='3.0'/>
                    <field name='d' accessType='inputOutput' type='SFFloat' value='3.0'/>
                    <field name='tdelta' accessType='inputOutput' type='SFFloat' value='0.5'/>
                    <field name='pdelta' accessType='inputOutput' type='SFFloat' value='0.5'/>
<![CDATA[
ecmascript:
			function set_translation(value) {
				translation = value;
			}
			function translation_changed() {
				return translation;
			}
			function initialize() {
			    translation = new SFVec3f(0, 0, 0);
			    velocity = new SFVec3f(
			    	Math.random() - 0.5,
				Math.random() - 0.5,
				Math.random() - 0.5);
			}
			function set_fraction() {
			    translation = new SFVec3f(
			    	translation[0] + velocity[0],
				translation[1] + velocity[1],
				translation[2] + velocity[2]);
			    for (var j = 0; j <= 2; j++) {
				    if (Math.abs(translation[j]) > 10) {
					initialize();
				    } else {
					velocity[0] += Math.random() * 0.2 - 0.1;
					velocity[1] += Math.random() * 0.2 - 0.1;
					velocity[2] += Math.random() * 0.2 - 0.1;
				    }
			    }
			    animate_flowers();
			}

			function initialize() {
			     resolution = 100;
			     updateCoordinates(resolution);
			     if (typeof coordIndexes == 'undefined' || coordIndexes == null) {
				coordIndexes = new MFInt32();
			     }
			     ci = 0;
			     for ( i = 0; i < resolution-1; i++) {
				for ( j = 0; j < resolution-1; j++) {
				     coordIndexes[ci] = i*resolution+j;
				     coordIndexes[ci+1] = i*resolution+j+1;
				     coordIndexes[ci+2] = (i+1)*resolution+j+1;
				     coordIndexes[ci+3] = (i+1)*resolution+j;
				     coordIndexes[ci+4] = -1;
				     ci += 5;
				}
			    }
			}

			function updateCoordinates(resolution) {
			     theta = 0.0;
			     phi = 0.0;
			     delta = (2 * 3.141592653) / (resolution-1);
			     if (typeof coordinates == 'undefined' || coordinates == null) {
				coordinates = new MFVec3f();
			     }
			     for ( i = 0; i < resolution; i++) {
				for ( j = 0; j < resolution; j++) {
					rho = a + b * Math.cos(c * theta) * Math.cos(d * phi);
					coordinates[i*resolution+j] = new SFVec3f();
					coordinates[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
					coordinates[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
					coordinates[i*resolution+j][2] = rho * Math.sin(phi);
					theta += delta;
				}
				phi += delta;
			     }
			}

			function animate_flowers(fraction, eventTime) {
				choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					a += Math.random() * 0.2 - 0.1;
					break;
				case 1:
					b += Math.random() * 0.2 - 0.1;
					break;
				case 2:
					c += Math.random() * 2 - 1;
					break;
				case 3:
					d += Math.random() * 2 - 1;
					break;
				}
				if (a > 1) {
					a =  0.5;
				}
				if (b > 1) {
					b =  0.5;
				}
				if (c < 1) {
					c =  4;
				}
				if (d < 1) {
					d =  4;
				}
				if (c > 10) {
					c = 4;
				}
				if (d > 10) {
					d = 4;
				}
				resolution = 100;
				updateCoordinates(resolution);
			}

]]>
                </Script>
                <TimeSensor DEF='TourTime' cycleInterval='0.15' loop='true'/>
                <ROUTE fromField='cycleTime' fromNode='TourTime' toField='set_fraction' toNode='Bounce'/>
                <ROUTE fromField='translation_changed' fromNode='Bounce' toField='set_translation' toNode='transform'/>
                <ROUTE fromField='coordIndexes' fromNode='Bounce' toField='set_coordIndex' toNode='Orbit'/>
                <ROUTE fromField='coordinates' fromNode='Bounce' toField='set_point' toNode='OrbitCoordinates'/>
            </ProtoBody>
        </ProtoDeclare>
        <Transform>
            <ProtoInstance name='flower'/>
            <ProtoInstance name='flower'/>
            <ProtoInstance name='flower'/>
        </Transform>
    </Scene>
</X3D>
