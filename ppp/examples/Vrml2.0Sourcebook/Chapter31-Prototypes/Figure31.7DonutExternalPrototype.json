{
  "X3D": {
    "encoding": "UTF-8",
    "@profile": "Immersive",
    "@version": "3.0",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema": "http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "title",
          "@content": "Figure31.7DonutExternalPrototype.x3d"
        },
        {
          "@name": "creator",
          "@content": "Figure 31.7, The VRML 2.0 Sourcebook, Copyright [1997] By Andrea L. Ames, David R. Nadeau, and John L. Moreland"
        },
        {
          "@name": "reference",
          "@content": "http://www.wiley.com/legacy/compbooks/vrml2sbk/ch31/31fig07.htm"
        },
        {
          "@name": "translator",
          "@content": "Don Brutzman"
        },
        {
          "@name": "created",
          "@content": "22 November 2000"
        },
        {
          "@name": "modified",
          "@content": "25 March 2012"
        },
        {
          "@name": "description",
          "@content": "A donut shape built using the Donut geometry node and the LightOak appearance node. Also see Figures 30.5 and 31.6 for comparison."
        },
        {
          "@name": "identifier",
          "@content": "http://www.web3d.org/x3d/content/examples/Vrml2.0Sourcebook/Chapter31-Prototypes/Figure31.7DonutExternalPrototype.x3d"
        },
        {
          "@name": "generator",
          "@content": "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
        },
        {
          "@name": "license",
          "@content": "../../license.html"
        },
        {
          "@name": "translated",
          "@content": "02 July 2016"
        },
        {
          "@name": "generator",
          "@content": "X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
        },
        {
          "@name": "warning",
          "@content": "An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ]
    },
    "Scene": {
      "-children": [
        {},
        {},
        {
          "Viewpoint": {
            "@description": "Click to pick a size",
            "@orientation": [
              1,
              0,
              0,
              -0.52
            ],
            "@position": [
              0,
              7,
              12
            ]
          }
        },
        {
          "#comment": "Donut instances from prototypes"
        },
        {
          "Transform": {
            "@translation": [
              0,
              2,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-geometry": {
                    "Extrusion": {
                      "@DEF": "DECLDonut_INSTANCE_DonutExtrusion",
                      "@beginCap": false,
                      "@creaseAngle": 1.57,
                      "@endCap": false
                    }
                  },
                  "-appearance": {
                    "Appearance": {
                      "@DEF": "DECLLightOak_INSTANCE1000_LightOakAppearance",
                      "-children": [
                        {
                          "#comment": "textureTransform field IS exposed through the Prototype field interface with same name"
                        },
                        {
                          "#comment": "Note that each prototype declaration has independent scope, and so DEF/USE is not possible for sharing. DEF remains a good way to identify the image file however."
                        }
                      ],
                      "-textureTransform": {
                        "TextureTransform": {
                          "@center": [
                            0,
                            5
                          ],
                          "@rotation": 0.758,
                          "@scale": [
                            2,
                            0.5
                          ],
                          "@translation": [
                            0.5,
                            0
                          ]
                        }
                      },
                      "-material": {
                        "Material": {
                          "@diffuseColor": [
                            1,
                            0.65,
                            0.53
                          ]
                        }
                      },
                      "-texture": {
                        "ImageTexture": {
                          "@DEF": "DECLLightOak_INSTANCE1000_wood_g_scope2",
                          "@url": [
                            "../Chapter17-Textures/wood_g.jpg",
                            "http://www.web3d.org/x3d/content/examples/Vrml2.0Sourcebook/Chapter17-Textures/wood_g.jpg"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "#comment": "Donut maker creates torus on initialization - external script. Modified script to add endpoints matching startpoints."
              },
              {
                "Script": {
                  "@DEF": "DECLDonut_INSTANCE_DonutMakerInternalScript",
                  "field": [
                    {
                      "@name": "crossSectionRadius",
                      "@accessType": "initializeOnly",
                      "@type": "SFFloat",
                      "@value": 1
                    },
                    {
                      "@name": "spineRadius",
                      "@accessType": "initializeOnly",
                      "@type": "SFFloat",
                      "@value": 2
                    },
                    {
                      "@name": "crossSectionResolution",
                      "@accessType": "initializeOnly",
                      "@type": "SFInt32",
                      "@value": 16
                    },
                    {
                      "@name": "spineResolution",
                      "@accessType": "initializeOnly",
                      "@type": "SFInt32",
                      "@value": 16
                    },
                    {
                      "@name": "set_crossSectionRadius",
                      "@accessType": "inputOnly",
                      "@type": "SFFloat"
                    },
                    {
                      "@name": "set_spineRadius",
                      "@accessType": "inputOnly",
                      "@type": "SFFloat"
                    },
                    {
                      "@name": "crossSection_changed",
                      "@accessType": "outputOnly",
                      "@type": "MFVec2f"
                    },
                    {
                      "@name": "spine_changed",
                      "@accessType": "outputOnly",
                      "@type": "MFVec3f"
                    }
                  ],
                  "#sourceText": [
                    "ecmascript:",
                    "",
                    "function initialize( ) {",
                    "    generateCrossSection( );",
                    "    generateSpine( );",
                    "}",
                    "",
                    "function set_crossSectionRadius( csr, ts )",
                    "{",
                    "    crossSectionRadius = csr;",
                    "//  Browser.print ('crossSectionRadius =' + crossSectionRadius);",
                    "    generateCrossSection( );",
                    "}",
                    "",
                    "function set_spineRadius( sr, ts )",
                    "{",
                    "    spineRadius = sr;",
                    "//  Browser.print ('spineRadius =' + spineRadius);",
                    "    generateSpine( );",
                    "}",
                    "",
                    "function generateCrossSection( )",
                    "{",
                    "    newCrossSection = new MFVec2f(); // temporary hold variable",
                    "    angle = 0.0;",
                    "    delta = 6.28 / crossSectionResolution;",
                    "    for ( i = 0; i <= crossSectionResolution + 1; i++ ) {",
                    "        newCrossSection[i][0] =  crossSectionRadius * Math.cos( angle );",
                    "        newCrossSection[i][1] = -crossSectionRadius * Math.sin( angle );",
                    "        angle += delta;",
                    "    }",
                    "    // make ends meet",
                    "    newCrossSection[crossSectionResolution + 1][0] = newCrossSection[0][0];",
                    "    newCrossSection[crossSectionResolution + 1][1] = newCrossSection[0][1];",
                    "",
                    "    crossSection_changed = newCrossSection;",
                    "}",
                    "",
                    "function generateSpine( )",
                    "{",
                    "    newSpine = new MFVec3f(); // temporary hold variable",
                    "    angle = 0.0;",
                    "    delta = (2 * 3.141592653) / spineResolution;",
                    "    for ( i = 0; i <= spineResolution; i++ ) {",
                    "        newSpine[i][0] = spineRadius * Math.cos( angle );",
                    "        newSpine[i][1] = 0.0;",
                    "        newSpine[i][2] = -spineRadius * Math.sin( angle );",
                    "        angle += delta;",
                    "    }",
                    "    // make ends meet",
                    "    newSpine[spineResolution + 1][0] = newSpine[0][0];",
                    "    newSpine[spineResolution + 1][1] = 0.0;",
                    "    newSpine[spineResolution + 1][2] = newSpine[0][2];",
                    "",
                    "    spine_changed = newSpine;",
                    "}"
                  ]
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLDonut_INSTANCE_DonutMakerInternalScript",
                  "@fromField": "spine_changed",
                  "@toNode": "DECLDonut_INSTANCE_DonutExtrusion",
                  "@toField": "set_spine"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLDonut_INSTANCE_DonutMakerInternalScript",
                  "@fromField": "crossSection_changed",
                  "@toNode": "DECLDonut_INSTANCE_DonutExtrusion",
                  "@toField": "set_crossSection"
                }
              }
            ]
          }
        },
        {
          "#comment": "Hmmm, what size donut do you really want?"
        },
        {
          "TimeSensor": {
            "@DEF": "Clock",
            "@cycleInterval": 10,
            "@loop": true
          }
        },
        {
          "ScalarInterpolator": {
            "@DEF": "DonutThickness",
            "@key": [
              0,
              0.4,
              0.5,
              0.9,
              1
            ],
            "@keyValue": [
              0.75,
              1.25,
              1.25,
              0.75,
              0.75
            ]
          }
        },
        {
          "Transform": {
            "@translation": [
              0,
              -2,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-geometry": {
                    "Extrusion": {
                      "@DEF": "DECLDonut_SpecialtyOfTheHouse_DonutExtrusion",
                      "@beginCap": false,
                      "@creaseAngle": 1.57,
                      "@endCap": false
                    }
                  },
                  "-appearance": {
                    "Appearance": {
                      "-texture": {
                        "ImageTexture": {
                          "@url": [
                            "../Chapter17-Textures/icing.jpg",
                            "http://www.web3d.org/x3d/content/examples/Vrml2.0Sourcebook/Chapter17-Textures/icing.jpg"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "TouchSensor": {
                  "@DEF": "StopSizeChanges",
                  "@description": "touch to stop size changes"
                }
              },
              {
                "#comment": "Donut maker creates torus on initialization - external script. Modified script to add endpoints matching startpoints."
              },
              {
                "Script": {
                  "@DEF": "DECLDonut_SpecialtyOfTheHouse_DonutMakerInternalScript",
                  "field": [
                    {
                      "@name": "crossSectionRadius",
                      "@accessType": "initializeOnly",
                      "@type": "SFFloat",
                      "@value": 0.5
                    },
                    {
                      "@name": "spineRadius",
                      "@accessType": "initializeOnly",
                      "@type": "SFFloat",
                      "@value": 2
                    },
                    {
                      "@name": "crossSectionResolution",
                      "@accessType": "initializeOnly",
                      "@type": "SFInt32",
                      "@value": 16
                    },
                    {
                      "@name": "spineResolution",
                      "@accessType": "initializeOnly",
                      "@type": "SFInt32",
                      "@value": 16
                    },
                    {
                      "@name": "set_crossSectionRadius",
                      "@accessType": "inputOnly",
                      "@type": "SFFloat"
                    },
                    {
                      "@name": "set_spineRadius",
                      "@accessType": "inputOnly",
                      "@type": "SFFloat"
                    },
                    {
                      "@name": "crossSection_changed",
                      "@accessType": "outputOnly",
                      "@type": "MFVec2f"
                    },
                    {
                      "@name": "spine_changed",
                      "@accessType": "outputOnly",
                      "@type": "MFVec3f"
                    }
                  ],
                  "#sourceText": [
                    "ecmascript:",
                    "",
                    "function initialize( ) {",
                    "    generateCrossSection( );",
                    "    generateSpine( );",
                    "}",
                    "",
                    "function set_crossSectionRadius( csr, ts )",
                    "{",
                    "    crossSectionRadius = csr;",
                    "//  Browser.print ('crossSectionRadius =' + crossSectionRadius);",
                    "    generateCrossSection( );",
                    "}",
                    "",
                    "function set_spineRadius( sr, ts )",
                    "{",
                    "    spineRadius = sr;",
                    "//  Browser.print ('spineRadius =' + spineRadius);",
                    "    generateSpine( );",
                    "}",
                    "",
                    "function generateCrossSection( )",
                    "{",
                    "    newCrossSection = new MFVec2f(); // temporary hold variable",
                    "    angle = 0.0;",
                    "    delta = 6.28 / crossSectionResolution;",
                    "    for ( i = 0; i <= crossSectionResolution + 1; i++ ) {",
                    "        newCrossSection[i][0] =  crossSectionRadius * Math.cos( angle );",
                    "        newCrossSection[i][1] = -crossSectionRadius * Math.sin( angle );",
                    "        angle += delta;",
                    "    }",
                    "    // make ends meet",
                    "    newCrossSection[crossSectionResolution + 1][0] = newCrossSection[0][0];",
                    "    newCrossSection[crossSectionResolution + 1][1] = newCrossSection[0][1];",
                    "",
                    "    crossSection_changed = newCrossSection;",
                    "}",
                    "",
                    "function generateSpine( )",
                    "{",
                    "    newSpine = new MFVec3f(); // temporary hold variable",
                    "    angle = 0.0;",
                    "    delta = (2 * 3.141592653) / spineResolution;",
                    "    for ( i = 0; i <= spineResolution; i++ ) {",
                    "        newSpine[i][0] = spineRadius * Math.cos( angle );",
                    "        newSpine[i][1] = 0.0;",
                    "        newSpine[i][2] = -spineRadius * Math.sin( angle );",
                    "        angle += delta;",
                    "    }",
                    "    // make ends meet",
                    "    newSpine[spineResolution + 1][0] = newSpine[0][0];",
                    "    newSpine[spineResolution + 1][1] = 0.0;",
                    "    newSpine[spineResolution + 1][2] = newSpine[0][2];",
                    "",
                    "    spine_changed = newSpine;",
                    "}"
                  ]
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLDonut_SpecialtyOfTheHouse_DonutMakerInternalScript",
                  "@fromField": "spine_changed",
                  "@toNode": "DECLDonut_SpecialtyOfTheHouse_DonutExtrusion",
                  "@toField": "set_spine"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLDonut_SpecialtyOfTheHouse_DonutMakerInternalScript",
                  "@fromField": "crossSection_changed",
                  "@toNode": "DECLDonut_SpecialtyOfTheHouse_DonutExtrusion",
                  "@toField": "set_crossSection"
                }
              }
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "Clock",
            "@fromField": "fraction_changed",
            "@toNode": "DonutThickness",
            "@toField": "set_fraction"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DonutThickness",
            "@fromField": "value_changed",
            "@toNode": "DECLDonut_SpecialtyOfTheHouse_DonutMakerInternalScript",
            "@toField": "set_crossSectionRadius"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "StopSizeChanges",
            "@fromField": "touchTime",
            "@toNode": "Clock",
            "@toField": "stopTime"
          }
        }
      ]
    }
  }
}
